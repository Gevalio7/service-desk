const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_BASE_URL = 'http://localhost:3007/api';
const SERVICE_API_TOKEN = 'service-desk-api-token';

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç API
const apiClient = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Authorization': `Bearer ${SERVICE_API_TOKEN}`,
    'Content-Type': 'application/json'
  }
});

async function testRealUser() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...\n');

  try {
    const realTelegramId = '5864094586'; // –†–µ–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    console.log(`1Ô∏è‚É£ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID: ${realTelegramId}`);
    
    try {
      const userResponse = await apiClient.get(`/users/telegram/${realTelegramId}`);
      
      if (userResponse.data && userResponse.data.user) {
        const user = userResponse.data.user;
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', {
          id: user.id,
          name: `${user.firstName} ${user.lastName}`,
          email: user.email,
          role: user.role,
          telegramId: user.telegramId,
          isActive: user.isActive
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        const ticketsResponse = await apiClient.get('/tickets', {
          params: {
            createdById: user.id,
            limit: 10,
            sortBy: 'createdAt',
            sortOrder: 'DESC'
          }
        });
        
        if (ticketsResponse.data && ticketsResponse.data.tickets) {
          const tickets = ticketsResponse.data.tickets;
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫: ${tickets.length}`);
          
          if (tickets.length > 0) {
            console.log('\nüìã –ó–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
            tickets.forEach((ticket, index) => {
              console.log(`${index + 1}. ID: ${ticket.id.substring(0, 8)} | ${ticket.title} | ${ticket.status}`);
            });
          } else {
            console.log('üì≠ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞—è–≤–æ–∫');
          }
        }
        
      } else {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API');
      }
      
    } catch (userError) {
      if (userError.response && userError.response.status === 404) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (404)');
        console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
        console.log('1. –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å');
        console.log('2. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ Telegram ID —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
        console.log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω (isActive: true)');
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram ID
        console.log('\nüîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram ID...');
        try {
          const allUsersResponse = await apiClient.get('/users', {
            params: {
              limit: 100
            }
          });
          
          if (allUsersResponse.data && allUsersResponse.data.users) {
            const usersWithTelegram = allUsersResponse.data.users.filter(u => u.telegramId);
            console.log(`–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram ID: ${usersWithTelegram.length}`);
            
            usersWithTelegram.forEach(user => {
              console.log(`- ${user.firstName} ${user.lastName}: ${user.telegramId} (${user.isActive ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'})`);
            });
          }
        } catch (listError) {
          console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', listError.response?.status);
        }
        
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ API:', {
          status: userError.response?.status,
          message: userError.message,
          data: userError.response?.data
        });
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
testRealUser();