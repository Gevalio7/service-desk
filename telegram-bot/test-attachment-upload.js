const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_BASE_URL = 'http://localhost:3007/api';
const API_TOKEN = 'service-desk-api-token';

async function testAttachmentUpload() {
  try {
    console.log('üß™ –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –í–õ–û–ñ–ï–ù–ò–ô - –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    
    // 1. –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É
    console.log('\nüîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞—è–≤–æ–∫...');
    const ticketsResponse = await axios.get(`${API_BASE_URL}/tickets?limit=1`, {
      headers: {
        'Authorization': `Bearer ${API_TOKEN}`
      }
    });
    
    if (!ticketsResponse.data || !ticketsResponse.data.tickets || ticketsResponse.data.tickets.length === 0) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
    
    const testTicket = ticketsResponse.data.tickets[0];
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', testTicket.id);
    console.log('üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞—è–≤–∫–∏:', testTicket.title);
    
    // 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    const testFilePath = path.join(__dirname, 'test-attachment.txt');
    const testFileContent = '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–ª–æ–∂–µ–Ω–∏–π.\n–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ' + new Date().toISOString();
    fs.writeFileSync(testFilePath, testFileContent);
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω:', testFilePath);
    
    // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –∫ –∑–∞—è–≤–∫–µ
    console.log('\nüìé –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∫ –∑–∞—è–≤–∫–µ...');
    const formData = new FormData();
    formData.append('files', fs.createReadStream(testFilePath), {
      filename: 'test-attachment.txt',
      contentType: 'text/plain'
    });
    
    const uploadResponse = await axios.post(
      `${API_BASE_URL}/tickets/${testTicket.id}/attachments`,
      formData,
      {
        headers: {
          'Authorization': `Bearer ${API_TOKEN}`,
          ...formData.getHeaders()
        },
        timeout: 30000
      }
    );
    
    if (uploadResponse.data && uploadResponse.data.attachments) {
      console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!');
      console.log('üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:', {
        id: uploadResponse.data.attachments[0].id,
        filename: uploadResponse.data.attachments[0].filename,
        originalName: uploadResponse.data.attachments[0].originalName,
        size: uploadResponse.data.attachments[0].size,
        mimeType: uploadResponse.data.attachments[0].mimeType
      });
    } else {
      throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞');
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∑–∞—è–≤–∫–µ
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–∫–∏ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º...');
    const ticketDetailsResponse = await axios.get(`${API_BASE_URL}/tickets/${testTicket.id}`, {
      headers: {
        'Authorization': `Bearer ${API_TOKEN}`
      }
    });
    
    const ticketWithAttachments = ticketDetailsResponse.data.ticket;
    if (ticketWithAttachments.Attachments && ticketWithAttachments.Attachments.length > 0) {
      console.log('‚úÖ –í–ª–æ–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã –≤ –∑–∞—è–≤–∫–µ:');
      ticketWithAttachments.Attachments.forEach((attachment, index) => {
        console.log(`   ${index + 1}. ${attachment.originalName} (${attachment.size} bytes)`);
      });
    } else {
      console.log('‚ùå –í–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∑–∞—è–≤–∫–µ');
    }
    
    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é uploadAttachmentsToTicket (—Å–∏–º—É–ª—è—Ü–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞)
    console.log('\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ uploadAttachmentsToTicket...');
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    const testFile2Path = path.join(__dirname, 'test-telegram-file.txt');
    const testFile2Content = '–≠—Ç–æ —Ñ–∞–π–ª, —Å–∏–º—É–ª–∏—Ä—É—é—â–∏–π –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ Telegram –±–æ—Ç–∞.\n–í—Ä–µ–º—è: ' + new Date().toISOString();
    fs.writeFileSync(testFile2Path, testFile2Content);
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º
    const telegramAttachments = [
      {
        fileId: 'test-file-id-123',
        fileUrl: `file://${testFile2Path}`, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        fileName: 'telegram-test-file.txt',
        mimeType: 'text/plain',
        size: testFile2Content.length
      }
    ];
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é uploadAttachmentsToTicket
    console.log('üìé –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º...');
    
    for (const attachment of telegramAttachments) {
      try {
        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª (—Å–∏–º—É–ª–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑ Telegram)
        const fileData = fs.readFileSync(testFile2Path);
        
        // –°–æ–∑–¥–∞–µ–º form data
        const telegramFormData = new FormData();
        telegramFormData.append('files', fileData, {
          filename: attachment.fileName,
          contentType: attachment.mimeType
        });
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const telegramUploadResponse = await axios.post(
          `${API_BASE_URL}/tickets/${testTicket.id}/attachments`,
          telegramFormData,
          {
            headers: {
              'Authorization': `Bearer ${API_TOKEN}`,
              ...telegramFormData.getHeaders()
            },
            timeout: 30000
          }
        );
        
        if (telegramUploadResponse.data && telegramUploadResponse.data.attachments) {
          console.log('‚úÖ –§–∞–π–ª –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:', telegramUploadResponse.data.attachments[0].originalName);
        }
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º:', error.message);
      }
    }
    
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
    console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞—è–≤–∫–∏: ‚úÖ');
    console.log('- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∫ –∑–∞—è–≤–∫–µ: ‚úÖ');
    console.log('- –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–æ–∂–µ–Ω–∏—è –≤ –∑–∞—è–≤–∫–µ: ‚úÖ');
    console.log('- –°–∏–º—É–ª—è—Ü–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º –ø—Ä–æ—Ü–µ—Å—Å–∞: ‚úÖ');
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    if (fs.existsSync(testFilePath)) {
      fs.unlinkSync(testFilePath);
    }
    if (fs.existsSync(testFile2Path)) {
      fs.unlinkSync(testFile2Path);
    }
    console.log('üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã');
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:', error.message);
    if (error.response) {
      console.error('üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.data);
      console.error('üî¢ –°—Ç–∞—Ç—É—Å:', error.response.status);
    }
    console.error('üìö –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testAttachmentUpload();