const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const path = require('path');

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
const testFilePath = path.join(__dirname, 'test-file.txt');
fs.writeFileSync(testFilePath, '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–ª–æ–∂–µ–Ω–∏–π');

async function testAttachmentUpload() {
    try {
        console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–ª–æ–∂–µ–Ω–∏–π...');
        
        // 1. –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        console.log('1. –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É...');
        const ticketResponse = await axios.post('http://localhost:3007/api/tickets', {
            title: '–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤–ª–æ–∂–µ–Ω–∏–π',
            description: '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤',
            category: 'technical',
            priority: 'medium',
            type: 'incident',
            source: 'telegram',
            createdById: 'ed774439-ed6a-4317-bb7d-a463f0c19b67' // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        }, {
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer service-desk-api-token'
            }
        });
        
        const ticketId = ticketResponse.data.ticket?.id || ticketResponse.data.id;
        console.log(`‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: ${ticketId}`);
        console.log('–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:', JSON.stringify(ticketResponse.data, null, 2));
        
        // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –∫ –∑–∞—è–≤–∫–µ
        console.log('2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –∫ –∑–∞—è–≤–∫–µ...');
        const formData = new FormData();
        formData.append('files', fs.createReadStream(testFilePath));
        
        const uploadResponse = await axios.post(
            `http://localhost:3007/api/tickets/${ticketId}/attachments`,
            formData,
            {
                headers: {
                    ...formData.getHeaders(),
                    'Authorization': 'Bearer service-desk-api-token'
                }
            }
        );
        
        console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:', uploadResponse.data);
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–∫—É —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
        console.log('3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–∫—É —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏...');
        const ticketWithAttachments = await axios.get(
            `http://localhost:3007/api/tickets/${ticketId}`,
            {
                headers: {
                    'Authorization': 'Bearer service-desk-api-token'
                }
            }
        );
        
        console.log('üìé –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –∑–∞—è–≤–∫–∏:', JSON.stringify(ticketWithAttachments.data, null, 2));
        
        const attachments = ticketWithAttachments.data.ticket?.Attachments || ticketWithAttachments.data.attachments;
        console.log('üìé –í–ª–æ–∂–µ–Ω–∏—è –≤ –∑–∞—è–≤–∫–µ:', attachments);
        
        if (attachments && attachments.length > 0) {
            console.log('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! –í–ª–æ–∂–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ –∑–∞—è–≤–∫–µ.');
            console.log(`üìé –ù–∞–π–¥–µ–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–π: ${attachments.length}`);
            attachments.forEach((att, index) => {
                console.log(`  ${index + 1}. ${att.originalName} (${att.size} bytes)`);
            });
        } else {
            console.log('‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª! –í–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∑–∞—è–≤–∫–µ.');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.response?.data || error.message);
    } finally {
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        if (fs.existsSync(testFilePath)) {
            fs.unlinkSync(testFilePath);
        }
    }
}

testAttachmentUpload();