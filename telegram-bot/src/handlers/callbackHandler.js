const { Markup } = require('telegraf');

/**
 * Handle callback queries from inline buttons
 */
exports.handleCallbackQuery = async (ctx) => {
  try {
    const { apiClient, logger } = ctx;
    const { id } = ctx.from;
    const callbackData = ctx.callbackQuery.data;
    
    logger.info(`Callback query from user ${id}: ${callbackData}`);
    
    // Parse callback data
    const [action, value] = callbackData.split(':');
    
    // Handle different callback actions
    switch (action) {
      case 'category':
        await handleCategorySelection(ctx, value);
        break;
      
      case 'priority':
        await handlePrioritySelection(ctx, value);
        break;
      
      case 'confirm':
        await handleTicketConfirmation(ctx, value === 'yes');
        break;
      
      case 'comment':
        await handleCommentStart(ctx, value);
        break;
      
      case 'list_tickets':
        await ctx.answerCbQuery('–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫...');
        await ctx.deleteMessage();
        await ctx.telegram.sendMessage(id, '–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫...');
        await require('./ticketHandler').handleListTickets(ctx);
        break;
      
      default:
        await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
        break;
    }
  } catch (error) {
    ctx.logger.error('Error in handleCallbackQuery:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

/**
 * Handle category selection
 */
async function handleCategorySelection(ctx, category) {
  try {
    // Update ticket data with correct category
    ctx.session = ctx.session || {};
    ctx.session.ticketData = ctx.session.ticketData || {};
    
    // Use the category directly as it matches database enum
    ctx.session.ticketData.category = category;
    ctx.session.ticketData.type = 'incident'; // Default type
    
    // Answer callback query
    await ctx.answerCbQuery(`–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${translateCategory(category)}`);
    
    // Ask for priority
    await ctx.editMessageText(
      `–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${translateCategory(category)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞—è–≤–∫–∏:`,
      Markup.inlineKeyboard([
        [
          Markup.button.callback('üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π', 'priority:urgent'),
          Markup.button.callback('üü† –í—ã—Å–æ–∫–∏–π', 'priority:high')
        ],
        [
          Markup.button.callback('üü° –°—Ä–µ–¥–Ω–∏–π', 'priority:medium'),
          Markup.button.callback('üü¢ –ù–∏–∑–∫–∏–π', 'priority:low')
        ]
      ])
    );
  } catch (error) {
    ctx.logger.error('Error in handleCategorySelection:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * Handle priority selection
 */
async function handlePrioritySelection(ctx, priority) {
  try {
    // Update ticket data
    ctx.session = ctx.session || {};
    ctx.session.ticketData = ctx.session.ticketData || {};
    ctx.session.ticketData.priority = priority;
    
    // Answer callback query
    await ctx.answerCbQuery(`–í—ã–±—Ä–∞–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${translatePriority(priority)}`);
    
    // Ask for ticket title or description based on current data
    if (ctx.session.ticketData.title) {
      // Title already exists, ask for description
      await ctx.editMessageText(
        `–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${translateCategory(ctx.session.ticketData.category)}\n` +
        `–í—ã–±—Ä–∞–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${translatePriority(priority)}\n\n` +
        `–¢–µ–º–∞: ${ctx.session.ticketData.title}\n\n` +
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:'
      );
      ctx.session.state = 'awaiting_description';
    } else {
      // No title yet, ask for title
      await ctx.editMessageText(
        `–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${translateCategory(ctx.session.ticketData.category)}\n` +
        `–í—ã–±—Ä–∞–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${translatePriority(priority)}\n\n` +
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∑–∞—è–≤–∫–∏:'
      );
      ctx.session.state = 'awaiting_title';
    }
    
    // Update state
    ctx.session.state = 'awaiting_title';
  } catch (error) {
    ctx.logger.error('Error in handlePrioritySelection:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * Handle ticket confirmation
 */
async function handleTicketConfirmation(ctx, confirmed) {
  try {
    const { apiClient, logger } = ctx;
    const { id } = ctx.from;
    
    if (!confirmed) {
      // Cancel ticket creation
      await ctx.answerCbQuery('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ');
      await ctx.editMessageText('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
      
      // Reset session
      delete ctx.session.state;
      delete ctx.session.ticketData;
      
      return;
    }
    
    // Confirm ticket creation
    await ctx.answerCbQuery('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏...');
    
    // Get user by Telegram ID
    try {
      const userResponse = await apiClient.get(`/users/telegram/${id}`);
      
      if (userResponse.data && userResponse.data.user) {
        const user = userResponse.data.user;
        
        // Create ticket
        const ticketData = {
          ...ctx.session.ticketData,
          createdById: user.id,
          telegramMessageId: ctx.callbackQuery.message.message_id.toString()
        };
        
        const ticketResponse = await apiClient.post('/tickets', ticketData);
        
        if (ticketResponse.data && ticketResponse.data.ticket) {
          const ticket = ticketResponse.data.ticket;
          
          // Success message
          await ctx.editMessageText(
            `‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n` +
            `<b>ID:</b> ${ticket.id.substring(0, 8)}\n` +
            `<b>–¢–µ–º–∞:</b> ${ticket.title}\n` +
            `<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${translateCategory(ticket.category)}\n` +
            `<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> ${translatePriority(ticket.priority)}\n\n` +
            `–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:\n` +
            `/status ${ticket.id.substring(0, 8)}`,
            {
              parse_mode: 'HTML',
              ...Markup.inlineKeyboard([
                [Markup.button.callback('üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', 'list_tickets')]
              ])
            }
          );
          
          // Reset session
          delete ctx.session.state;
          delete ctx.session.ticketData;
        } else {
          await ctx.editMessageText('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
      } else {
        await ctx.editMessageText(
          '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏.'
        );
      }
    } catch (error) {
      logger.error('Error creating ticket:', error);
      await ctx.editMessageText('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  } catch (error) {
    ctx.logger.error('Error in handleTicketConfirmation:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * Handle comment start
 */
async function handleCommentStart(ctx, ticketId) {
  try {
    // Answer callback query
    await ctx.answerCbQuery('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è...');
    
    // Update session
    ctx.session = ctx.session || {};
    ctx.session.state = 'awaiting_comment';
    ctx.session.commentData = {
      ticketId
    };
    
    // Ask for comment text
    await ctx.reply(
      `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ #${ticketId.substring(0, 8)}:`
    );
  } catch (error) {
    ctx.logger.error('Error in handleCommentStart:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * Translate category to Russian
 */
function translateCategory(category) {
  switch (category) {
    case 'technical':
      return '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è';
    case 'billing':
      return '–ë–∏–ª–ª–∏–Ω–≥';
    case 'general':
      return '–û–±—â–∞—è';
    case 'feature_request':
      return '–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è';
    default:
      return category;
  }
}

/**
 * Translate type to Russian
 */
function translateType(type) {
  switch (type) {
    case 'incident':
      return '–ò–Ω—Ü–∏–¥–µ–Ω—Ç';
    case 'service_request':
      return '–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ';
    case 'change_request':
      return '–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ';
    default:
      return type;
  }
}

/**
 * Translate priority to Russian
 */
function translatePriority(priority) {
  switch (priority) {
    case 'urgent':
      return '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π';
    case 'high':
      return '–í—ã—Å–æ–∫–∏–π';
    case 'medium':
      return '–°—Ä–µ–¥–Ω–∏–π';
    case 'low':
      return '–ù–∏–∑–∫–∏–π';
    default:
      return priority;
  }
}