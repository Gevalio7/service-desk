const { Markup } = require('telegraf');
const moment = require('moment');

/**
 * Handle /new command - start new ticket creation
 */
exports.handleNewTicket = async (ctx) => {
  try {
    const { id } = ctx.from;
    
    // Set user state to creating ticket
    ctx.session = ctx.session || {};
    ctx.session.state = 'creating_ticket';
    ctx.session.ticketData = {
      telegramId: id,
      source: 'telegram'
    };
    
    // Ask for ticket category
    await ctx.reply(
      '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–∫–∏:',
      Markup.inlineKeyboard([
        [
          Markup.button.callback('üî• –ò–Ω—Ü–∏–¥–µ–Ω—Ç', 'category:incident'),
          Markup.button.callback('üìù –ó–∞–ø—Ä–æ—Å', 'category:request')
        ],
        [
          Markup.button.callback('‚ùì –ü—Ä–æ–±–ª–µ–º–∞', 'category:problem'),
          Markup.button.callback('üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ', 'category:change')
        ]
      ])
    );
  } catch (error) {
    ctx.logger.error('Error in handleNewTicket:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

/**
 * Handle /tickets command - list user tickets
 */
exports.handleListTickets = async (ctx) => {
  try {
    const { apiClient, logger } = ctx;
    const { id } = ctx.from;
    
    // Get user by Telegram ID
    try {
      const userResponse = await apiClient.get(`/users/telegram/${id}`);
      
      if (userResponse.data && userResponse.data.user) {
        const user = userResponse.data.user;
        
        // Get user's tickets
        const ticketsResponse = await apiClient.get('/tickets', {
          params: {
            createdById: user.id,
            limit: 10,
            sortBy: 'createdAt',
            sortOrder: 'DESC'
          }
        });
        
        if (ticketsResponse.data && ticketsResponse.data.tickets) {
          const tickets = ticketsResponse.data.tickets;
          
          if (tickets.length === 0) {
            await ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /new, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.');
            return;
          }
          
          let message = '–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:\n\n';
          
          for (const ticket of tickets) {
            const createdAt = moment(ticket.createdAt).format('DD.MM.YYYY HH:mm');
            const statusEmoji = getStatusEmoji(ticket.status);
            const priorityEmoji = getPriorityEmoji(ticket.priority);
            
            message += `${statusEmoji} ${priorityEmoji} <b>#${ticket.id.substring(0, 8)}</b>: ${ticket.title}\n`;
            message += `–°—Ç–∞—Ç—É—Å: ${translateStatus(ticket.status)} | –°–æ–∑–¥–∞–Ω–∞: ${createdAt}\n\n`;
          }
          
          message += '–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status <ID>';
          
          await ctx.reply(message, { parse_mode: 'HTML' });
        } else {
          await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
      } else {
        await ctx.reply(
          '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏.'
        );
      }
    } catch (error) {
      if (error.response && error.response.status === 404) {
        await ctx.reply(
          '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏.'
        );
      } else {
        logger.error('Error getting user tickets:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    }
  } catch (error) {
    ctx.logger.error('Error in handleListTickets:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

/**
 * Handle /status command - check ticket status
 */
exports.handleCheckStatus = async (ctx) => {
  try {
    const { apiClient, logger } = ctx;
    const { id } = ctx.from;
    
    // Get ticket ID from command arguments
    const args = ctx.message.text.split(' ');
    
    if (args.length < 2) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞—è–≤–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: /status 12345');
      return;
    }
    
    const ticketId = args[1];
    
    // Get user by Telegram ID
    try {
      const userResponse = await apiClient.get(`/users/telegram/${id}`);
      
      if (userResponse.data && userResponse.data.user) {
        const user = userResponse.data.user;
        
        // Get ticket details
        try {
          const ticketResponse = await apiClient.get(`/tickets/${ticketId}`);
          
          if (ticketResponse.data && ticketResponse.data.ticket) {
            const ticket = ticketResponse.data.ticket;
            
            // Check if user has access to this ticket
            if (ticket.createdById !== user.id && user.role === 'client') {
              await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ.');
              return;
            }
            
            // Format ticket details
            const createdAt = moment(ticket.createdAt).format('DD.MM.YYYY HH:mm');
            const updatedAt = moment(ticket.updatedAt).format('DD.MM.YYYY HH:mm');
            const statusEmoji = getStatusEmoji(ticket.status);
            const priorityEmoji = getPriorityEmoji(ticket.priority);
            
            let message = `${statusEmoji} ${priorityEmoji} <b>–ó–∞—è–≤–∫–∞ #${ticket.id.substring(0, 8)}</b>\n\n`;
            message += `<b>–¢–µ–º–∞:</b> ${ticket.title}\n`;
            message += `<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${ticket.description}\n\n`;
            message += `<b>–°—Ç–∞—Ç—É—Å:</b> ${translateStatus(ticket.status)}\n`;
            message += `<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> ${translatePriority(ticket.priority)}\n`;
            message += `<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${translateCategory(ticket.category)}\n\n`;
            message += `<b>–°–æ–∑–¥–∞–Ω–∞:</b> ${createdAt}\n`;
            message += `<b>–û–±–Ω–æ–≤–ª–µ–Ω–∞:</b> ${updatedAt}\n`;
            
            // Add SLA information if available
            if (ticket.slaDeadline) {
              const slaDeadline = moment(ticket.slaDeadline);
              const now = moment();
              const isBreached = now.isAfter(slaDeadline);
              
              message += `\n<b>SLA –¥–µ–¥–ª–∞–π–Ω:</b> ${slaDeadline.format('DD.MM.YYYY HH:mm')}`;
              
              if (isBreached) {
                message += ' ‚ö†Ô∏è <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω!</b>';
              } else {
                const timeLeft = slaDeadline.diff(now, 'hours');
                message += ` (–æ—Å—Ç–∞–ª–æ—Å—å ${timeLeft} —á.)`;
              }
            }
            
            // Add assigned agent if available
            if (ticket.assignedTo) {
              message += `\n\n<b>–ù–∞–∑–Ω–∞—á–µ–Ω–∞:</b> ${ticket.assignedTo.firstName} ${ticket.assignedTo.lastName}`;
            }
            
            // Add comments count
            if (ticket.Comments && ticket.Comments.length > 0) {
              message += `\n\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</b> ${ticket.Comments.length}`;
            }
            
            // Add action buttons
            const buttons = [
              [Markup.button.callback('üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', `comment:${ticket.id}`)],
              [Markup.button.callback('üìã –í—Å–µ –∑–∞—è–≤–∫–∏', 'list_tickets')]
            ];
            
            await ctx.reply(message, {
              parse_mode: 'HTML',
              ...Markup.inlineKeyboard(buttons)
            });
          } else {
            await ctx.reply('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∑–∞—è–≤–∫–∏.');
          }
        } catch (error) {
          if (error.response && error.response.status === 404) {
            await ctx.reply('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∑–∞—è–≤–∫–∏.');
          } else {
            logger.error('Error getting ticket details:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
          }
        }
      } else {
        await ctx.reply(
          '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏.'
        );
      }
    } catch (error) {
      if (error.response && error.response.status === 404) {
        await ctx.reply(
          '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏.'
        );
      } else {
        logger.error('Error checking user:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    }
  } catch (error) {
    ctx.logger.error('Error in handleCheckStatus:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

// Helper functions

/**
 * Get emoji for ticket status
 */
function getStatusEmoji(status) {
  switch (status) {
    case 'new':
      return 'üÜï';
    case 'assigned':
      return 'üë§';
    case 'in_progress':
      return 'üîß';
    case 'on_hold':
      return '‚è∏Ô∏è';
    case 'resolved':
      return '‚úÖ';
    case 'closed':
      return 'üîí';
    default:
      return 'üìã';
  }
}

/**
 * Get emoji for ticket priority
 */
function getPriorityEmoji(priority) {
  switch (priority) {
    case 'P1':
      return 'üî¥';
    case 'P2':
      return 'üü†';
    case 'P3':
      return 'üü°';
    case 'P4':
      return 'üü¢';
    default:
      return '‚ö™';
  }
}

/**
 * Translate ticket status to Russian
 */
function translateStatus(status) {
  switch (status) {
    case 'new':
      return '–ù–æ–≤–∞—è';
    case 'assigned':
      return '–ù–∞–∑–Ω–∞—á–µ–Ω–∞';
    case 'in_progress':
      return '–í —Ä–∞–±–æ—Ç–µ';
    case 'on_hold':
      return '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞';
    case 'resolved':
      return '–†–µ—à–µ–Ω–∞';
    case 'closed':
      return '–ó–∞–∫—Ä—ã—Ç–∞';
    default:
      return status;
  }
}

/**
 * Translate ticket priority to Russian
 */
function translatePriority(priority) {
  switch (priority) {
    case 'P1':
      return '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π';
    case 'P2':
      return '–í—ã—Å–æ–∫–∏–π';
    case 'P3':
      return '–°—Ä–µ–¥–Ω–∏–π';
    case 'P4':
      return '–ù–∏–∑–∫–∏–π';
    default:
      return priority;
  }
}

/**
 * Translate ticket category to Russian
 */
function translateCategory(category) {
  switch (category) {
    case 'incident':
      return '–ò–Ω—Ü–∏–¥–µ–Ω—Ç';
    case 'request':
      return '–ó–∞–ø—Ä–æ—Å';
    case 'problem':
      return '–ü—Ä–æ–±–ª–µ–º–∞';
    case 'change':
      return '–ò–∑–º–µ–Ω–µ–Ω–∏–µ';
    default:
      return category;
  }
}