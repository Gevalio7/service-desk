const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_BASE_URL = 'http://localhost:3007/api';
const SERVICE_API_TOKEN = 'service-desk-api-token';

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç API
const apiClient = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Authorization': `Bearer ${SERVICE_API_TOKEN}`,
    'Content-Type': 'application/json'
  }
});

// –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /tickets
async function simulateTicketsCommand() {
  console.log('ü§ñ –°–∏–º—É–ª—è—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /tickets –≤ Telegram –±–æ—Ç–µ...\n');

  try {
    const telegramId = '5864094586'; // ID —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    console.log('1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID...');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID (–∫–∞–∫ –≤ handleListTickets)
    const userResponse = await apiClient.get(`/users/telegram/${telegramId}`);
    
    if (userResponse.data && userResponse.data.user) {
      const user = userResponse.data.user;
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', `${user.firstName} ${user.lastName} (${user.email})`);
      
      console.log('\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞–∫ –≤ handleListTickets)
      const ticketsResponse = await apiClient.get('/tickets', {
        params: {
          createdById: user.id,
          limit: 10,
          sortBy: 'createdAt',
          sortOrder: 'DESC'
        }
      });
      
      if (ticketsResponse.data && ticketsResponse.data.tickets) {
        const tickets = ticketsResponse.data.tickets;
        
        if (tickets.length === 0) {
          console.log('üì≠ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞—è–≤–æ–∫');
          console.log('–û—Ç–≤–µ—Ç –±–æ—Ç–∞: "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /new, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É."');
        } else {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫: ${tickets.length}`);
          
          // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –≤ handleListTickets
          let message = '–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:\n\n';
          
          for (const ticket of tickets) {
            const createdAt = new Date(ticket.createdAt).toLocaleString('ru-RU');
            const statusEmoji = getStatusEmoji(ticket.status);
            const priorityEmoji = getPriorityEmoji(ticket.priority);
            
            message += `${statusEmoji} ${priorityEmoji} **‚Ññ${ticket.id.substring(0, 8)}**: ${ticket.title}\n`;
            message += `–°—Ç–∞—Ç—É—Å: ${translateStatus(ticket.status)} | –°–æ–∑–¥–∞–Ω–∞: ${createdAt}\n\n`;
          }
          
          message += '–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status [ID]';
          
          console.log('\nüìã –û—Ç–≤–µ—Ç –±–æ—Ç–∞:');
          console.log('‚îÄ'.repeat(50));
          console.log(message);
          console.log('‚îÄ'.repeat(50));
        }
      } else {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫');
        console.log('–û—Ç–≤–µ—Ç –±–æ—Ç–∞: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."');
      }
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      console.log('–û—Ç–≤–µ—Ç –±–æ—Ç–∞: "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏."');
    }
    
  } catch (error) {
    if (error.response && error.response.status === 404) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (404)');
      console.log('–û—Ç–≤–µ—Ç –±–æ—Ç–∞: "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏."');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã:', {
        message: error.message,
        status: error.response?.status,
        data: error.response?.data
      });
      console.log('–û—Ç–≤–µ—Ç –±–æ—Ç–∞: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."');
    }
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∫–æ–ø–∏–∏ –∏–∑ ticketHandler.js)
function getStatusEmoji(status) {
  switch (status) {
    case 'new':
      return 'üÜï';
    case 'assigned':
      return 'üë§';
    case 'in_progress':
      return 'üîß';
    case 'on_hold':
      return '‚è∏Ô∏è';
    case 'resolved':
      return '‚úÖ';
    case 'closed':
      return 'üîí';
    default:
      return 'üìã';
  }
}

function getPriorityEmoji(priority) {
  switch (priority) {
    case 'urgent':
      return 'üî¥';
    case 'high':
      return 'üü†';
    case 'medium':
      return 'üü°';
    case 'low':
      return 'üü¢';
    default:
      return '‚ö™';
  }
}

function translateStatus(status) {
  switch (status) {
    case 'new':
      return '–ù–æ–≤–∞—è';
    case 'assigned':
      return '–ù–∞–∑–Ω–∞—á–µ–Ω–∞';
    case 'in_progress':
      return '–í —Ä–∞–±–æ—Ç–µ';
    case 'on_hold':
      return '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞';
    case 'resolved':
      return '–†–µ—à–µ–Ω–∞';
    case 'closed':
      return '–ó–∞–∫—Ä—ã—Ç–∞';
    default:
      return status;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
simulateTicketsCommand();