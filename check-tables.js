const { sequelize } = require('./backend/config/database');

async function checkTables() {
  try {
    await sequelize.authenticate();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    const [tables] = await sequelize.query(`
      SELECT table_name, 
             (SELECT COUNT(*) FROM information_schema.columns WHERE table_name = t.table_name) as column_count
      FROM information_schema.tables t
      WHERE table_schema = 'public' 
      AND table_type = 'BASE TABLE'
      ORDER BY table_name;
    `);
    
    const workflowTables = tables.filter(t => t.table_name.startsWith('workflow_'));
    const otherTables = tables.filter(t => !t.table_name.startsWith('workflow_'));
    
    console.log('\nüîÑ Workflow —Ç–∞–±–ª–∏—Ü—ã:');
    workflowTables.forEach(table => {
      console.log(`  ‚úì ${table.table_name} (${table.column_count} –∫–æ–ª–æ–Ω–æ–∫)`);
    });
    
    console.log('\nüìä –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
    otherTables.slice(0, 10).forEach(table => {
      console.log(`  ‚úì ${table.table_name} (${table.column_count} –∫–æ–ª–æ–Ω–æ–∫)`);
    });
    if (otherTables.length > 10) {
      console.log(`  ... –∏ –µ—â–µ ${otherTables.length - 10} —Ç–∞–±–ª–∏—Ü`);
    }
    
    console.log(`\nüìà –ò—Ç–æ–≥–æ: ${tables.length} —Ç–∞–±–ª–∏—Ü`);
    console.log(`   - Workflow —Ç–∞–±–ª–∏—Ü: ${workflowTables.length}`);
    console.log(`   - –û—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: ${otherTables.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ –≤ workflow —Ç–∞–±–ª–∏—Ü–∞—Ö
    const [workflowTypes] = await sequelize.query('SELECT COUNT(*) as count FROM workflow_types');
    const [workflowStatuses] = await sequelize.query('SELECT COUNT(*) as count FROM workflow_statuses');
    const [workflowTransitions] = await sequelize.query('SELECT COUNT(*) as count FROM workflow_transitions');
    
    console.log('\nüìù –î–∞–Ω–Ω—ã–µ –≤ workflow —Ç–∞–±–ª–∏—Ü–∞—Ö:');
    console.log(`  - –¢–∏–ø—ã workflow: ${workflowTypes[0].count}`);
    console.log(`  - –°—Ç–∞—Ç—É—Å—ã workflow: ${workflowStatuses[0].count}`);
    console.log(`  - –ü–µ—Ä–µ—Ö–æ–¥—ã workflow: ${workflowTransitions[0].count}`);
    
    console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await sequelize.close();
  }
}

checkTables();