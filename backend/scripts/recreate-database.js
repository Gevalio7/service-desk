require('dotenv').config();
const { sequelize } = require('../config/database');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
const {
  User,
  Ticket,
  Comment,
  Attachment,
  TicketHistory,
  Notification,
  TicketContact
} = require('../src/models');

async function recreateDatabase() {
  try {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await sequelize.authenticate();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');

    console.log('\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü...');
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    await sequelize.query('SET FOREIGN_KEY_CHECKS = 0', { raw: true }).catch(() => {
      // PostgreSQL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
      console.log('‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL');
    });

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å —É—á–µ—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
    const tablesToDrop = [
      'ticket_histories',
      'ticket_contacts', 
      'Attachments',
      'Comments',
      'Notifications',
      'Tickets',
      'Users'
    ];

    for (const tableName of tablesToDrop) {
      try {
        await sequelize.query(`DROP TABLE IF EXISTS "${tableName}" CASCADE;`);
        console.log(`  ‚úì –£–¥–∞–ª–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: ${tableName}`);
      } catch (error) {
        console.log(`  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É ${tableName}: ${error.message}`);
      }
    }

    // –£–¥–∞–ª—è–µ–º ENUM —Ç–∏–ø—ã –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const enumsToDelete = [
      'enum_Users_role',
      'enum_Tickets_category',
      'enum_Tickets_type', 
      'enum_Tickets_priority',
      'enum_Tickets_status',
      'enum_Tickets_source',
      'enum_TicketHistories_action',
      'enum_Notifications_type',
      'ticket_contact_role'
    ];

    for (const enumName of enumsToDelete) {
      try {
        await sequelize.query(`DROP TYPE IF EXISTS "${enumName}" CASCADE;`);
        console.log(`  ‚úì –£–¥–∞–ª–µ–Ω ENUM —Ç–∏–ø: ${enumName}`);
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è ENUM —Ç–∏–ø–æ–≤
      }
    }

    console.log('\nüèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º sequelize.sync –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
    console.log('  üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...');
    await sequelize.sync({ force: true });
    console.log('  ‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');

    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    const [tables] = await sequelize.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name;
    `);
    
    console.log('\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
    for (const table of tables) {
      console.log(`  - ${table.table_name}`);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
      const [columns] = await sequelize.query(`
        SELECT column_name, data_type, is_nullable, column_default
        FROM information_schema.columns 
        WHERE table_name = '${table.table_name}' 
        ORDER BY ordinal_position;
      `);
      
      console.log(`    –ö–æ–ª–æ–Ω–∫–∏ (${columns.length}):`);
      columns.forEach(col => {
        const nullable = col.is_nullable === 'YES' ? 'NULL' : 'NOT NULL';
        const defaultVal = col.column_default ? ` DEFAULT ${col.column_default}` : '';
        console.log(`      ‚Ä¢ ${col.column_name}: ${col.data_type} ${nullable}${defaultVal}`);
      });
      console.log('');
    }

    console.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    await createDefaultUsers();

    console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞!');
    console.log('‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π');
    console.log('‚úÖ –°–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    console.error('Stack:', error.stack);
    throw error;
  } finally {
    await sequelize.close();
  }
}

async function createDefaultUsers() {
  try {
    const users = [
      {
        username: 'admin',
        email: 'admin@servicedesk.com',
        password: 'admin123',
        firstName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        lastName: '–°–∏—Å—Ç–µ–º—ã',
        role: 'admin',
        department: 'IT',
        company: 'Service Desk'
      },
      {
        username: 'agent',
        email: 'agent@servicedesk.com',
        password: 'agent123',
        firstName: '–ê–≥–µ–Ω—Ç',
        lastName: '–ü–æ–¥–¥–µ—Ä–∂–∫–∏',
        role: 'agent',
        department: 'Support',
        company: 'Service Desk'
      },
      {
        username: 'client',
        email: 'client@servicedesk.com',
        password: 'client123',
        firstName: '–ö–ª–∏–µ–Ω—Ç',
        lastName: '–¢–µ—Å—Ç–æ–≤—ã–π',
        role: 'client',
        department: 'Sales',
        company: 'Test Company'
      }
    ];

    for (const userData of users) {
      await User.create(userData);
      console.log(`  ‚úì –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userData.email}`);
    }
    
    console.log('\nüìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log('  üëë –ê–¥–º–∏–Ω: admin@servicedesk.com / admin123');
    console.log('  üõ†Ô∏è –ê–≥–µ–Ω—Ç: agent@servicedesk.com / agent123');
    console.log('  üë§ –ö–ª–∏–µ–Ω—Ç: client@servicedesk.com / client123');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  recreateDatabase()
    .then(() => {
      console.log('\nüöÄ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error.message);
      process.exit(1);
    });
}

module.exports = { recreateDatabase };