const { sequelize } = require('../config/database');
const { Ticket, WorkflowType, WorkflowStatus } = require('../src/models');

async function migrateTicketsToWorkflow() {
  try {
    await sequelize.authenticate();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π workflow —Ç–∏–ø
    const defaultWorkflow = await WorkflowType.findOne({
      where: { isDefault: true, isActive: true },
      include: [{ model: WorkflowStatus }]
    });

    if (!defaultWorkflow) {
      console.error('‚ùå –î–µ—Ñ–æ–ª—Ç–Ω—ã–π workflow —Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log(`üìã –ù–∞–π–¥–µ–Ω workflow: ${defaultWorkflow.displayName?.ru || defaultWorkflow.name}`);
    console.log(`   –°—Ç–∞—Ç—É—Å–æ–≤: ${defaultWorkflow.WorkflowStatuses.length}`);

    // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞ –Ω–æ–≤—ã–µ
    const statusMapping = {
      'new': 'new',
      'assigned': 'assigned', 
      'in_progress': 'in_progress',
      'on_hold': 'on_hold',
      'resolved': 'resolved',
      'closed': 'closed'
    };

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–∫–µ—Ç—ã –±–µ–∑ workflow —Å—Ç–∞—Ç—É—Å–æ–≤
    const tickets = await Ticket.findAll({
      where: {
        workflowTypeId: null
      }
    });

    console.log(`\nüîÑ –ù–∞–π–¥–µ–Ω–æ —Ç–∏–∫–µ—Ç–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: ${tickets.length}`);

    let migratedCount = 0;
    let errorCount = 0;

    for (const ticket of tickets) {
      try {
        // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π workflow —Å—Ç–∞—Ç—É—Å
        const workflowStatusName = statusMapping[ticket.status] || 'new';
        const workflowStatus = defaultWorkflow.WorkflowStatuses.find(
          s => s.name === workflowStatusName
        );

        if (!workflowStatus) {
          console.warn(`‚ö†Ô∏è  –°—Ç–∞—Ç—É—Å ${workflowStatusName} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #${ticket.ticketNumber}`);
          continue;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç
        await ticket.update({
          workflowTypeId: defaultWorkflow.id,
          currentStatusId: workflowStatus.id
        });

        migratedCount++;
        
        if (migratedCount % 10 === 0) {
          console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${migratedCount}/${tickets.length}`);
        }

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∏–∫–µ—Ç–∞ #${ticket.ticketNumber}:`, error.message);
        errorCount++;
      }
    }

    console.log(`\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`);
    console.log(`   - –£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${migratedCount}`);
    console.log(`   - –û—à–∏–±–æ–∫: ${errorCount}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const [stats] = await sequelize.query(`
      SELECT 
        COUNT(*) as total_tickets,
        COUNT("workflowTypeId") as with_workflow_type,
        COUNT("currentStatusId") as with_current_status
      FROM "Tickets"
    `);

    console.log(`\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   - –í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: ${stats[0].total_tickets}`);
    console.log(`   - –° workflow —Ç–∏–ø–æ–º: ${stats[0].with_workflow_type}`);
    console.log(`   - –° —Ç–µ–∫—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º: ${stats[0].with_current_status}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
  } finally {
    await sequelize.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  migrateTicketsToWorkflow();
}

module.exports = migrateTicketsToWorkflow;