const { sequelize } = require('../config/database');

async function addWorkflowFieldsToTickets() {
  try {
    await sequelize.authenticate();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ –ø–æ–ª—è workflow –≤ —Ç–∞–±–ª–∏—Ü–µ Tickets
    const [columns] = await sequelize.query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'Tickets' 
      AND column_name IN ('workflowTypeId', 'currentStatusId');
    `);

    const existingColumns = columns.map(col => col.column_name);
    
    if (existingColumns.includes('workflowTypeId') && existingColumns.includes('currentStatusId')) {
      console.log('‚úÖ –ü–æ–ª—è workflow —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ Tickets');
      return;
    }

    console.log('üîÑ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è workflow –≤ —Ç–∞–±–ª–∏—Ü—É Tickets...');

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ workflowTypeId –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!existingColumns.includes('workflowTypeId')) {
      await sequelize.query(`
        ALTER TABLE "Tickets" 
        ADD COLUMN "workflowTypeId" UUID REFERENCES workflow_types(id);
      `);
      console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ workflowTypeId');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ currentStatusId –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!existingColumns.includes('currentStatusId')) {
      await sequelize.query(`
        ALTER TABLE "Tickets" 
        ADD COLUMN "currentStatusId" UUID REFERENCES workflow_statuses(id);
      `);
      console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ currentStatusId');
    }

    // –ü–æ–ª—É—á–∞–µ–º ID –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ workflow —Ç–∏–ø–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞
    const [defaultWorkflowType] = await sequelize.query(`
      SELECT id FROM workflow_types WHERE name = 'default_support' LIMIT 1;
    `);

    if (defaultWorkflowType.length > 0) {
      const workflowTypeId = defaultWorkflowType[0].id;
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è —ç—Ç–æ–≥–æ workflow
      const [initialStatus] = await sequelize.query(`
        SELECT id FROM workflow_statuses 
        WHERE "workflowTypeId" = :workflowTypeId AND "isInitial" = true 
        LIMIT 1;
      `, {
        replacements: { workflowTypeId }
      });

      if (initialStatus.length > 0) {
        const initialStatusId = initialStatus[0].id;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–∫–µ—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç workflow –¥–∞–Ω–Ω—ã—Ö
        await sequelize.query(`
          UPDATE "Tickets" 
          SET "workflowTypeId" = :workflowTypeId, "currentStatusId" = :currentStatusId
          WHERE "workflowTypeId" IS NULL OR "currentStatusId" IS NULL;
        `, {
          replacements: { 
            workflowTypeId, 
            currentStatusId: initialStatusId 
          }
        });
        
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–∫–µ—Ç—ã —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ workflow –¥–∞–Ω–Ω—ã–º–∏');
      }
    }

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    try {
      await sequelize.query(`
        CREATE INDEX IF NOT EXISTS "idx_tickets_workflow_type" 
        ON "Tickets" ("workflowTypeId");
      `);
      
      await sequelize.query(`
        CREATE INDEX IF NOT EXISTS "idx_tickets_current_status" 
        ON "Tickets" ("currentStatusId");
      `);
      
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è workflow –ø–æ–ª–µ–π');
    } catch (indexError) {
      console.log('‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', indexError.message);
    }

    console.log('üéâ –ü–æ–ª—è workflow —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É Tickets!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª–µ–π workflow:', error.message);
    throw error;
  } finally {
    await sequelize.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –µ—Å–ª–∏ –æ–Ω –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  addWorkflowFieldsToTickets()
    .then(() => {
      console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error);
      process.exit(1);
    });
}

module.exports = addWorkflowFieldsToTickets;