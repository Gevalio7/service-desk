const { sequelize } = require('../config/database');
const {
  WorkflowType,
  WorkflowStatus,
  WorkflowTransition,
  WorkflowCondition,
  WorkflowAction,
  User
} = require('../src/models');

async function createTestWorkflow() {
  try {
    await sequelize.authenticate();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ù–∞–π–¥–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è workflow
    const admin = await User.findOne({ where: { role: 'admin' } });
    if (!admin) {
      console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–æ–ª—å—é admin');
      return;
    }

    console.log('üë§ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', admin.email);

    // –°–æ–∑–¥–∞–µ–º —Ç–∏–ø workflow –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
    console.log('\nüìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–∞ workflow "–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã"...');
    const incidentWorkflow = await WorkflowType.create({
      name: 'incident',
      displayName: {
        ru: '–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã',
        en: 'Incidents'
      },
      description: {
        ru: 'Workflow –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –≤ –ò–¢-—Å–∏—Å—Ç–µ–º–∞—Ö',
        en: 'Workflow for handling IT system incidents'
      },
      icon: 'bug_report',
      color: '#f44336',
      isActive: true,
      isDefault: true,
      createdById: admin.id
    });

    console.log('‚úÖ –¢–∏–ø workflow —Å–æ–∑–¥–∞–Ω:', incidentWorkflow.id);

    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
    console.log('\nüìä –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤...');
    const statuses = [];

    const statusData = [
      {
        name: 'new',
        displayName: { ru: '–ù–æ–≤—ã–π', en: 'New' },
        description: { ru: '–ù–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç, —Ç—Ä–µ–±—É–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è', en: 'New incident, needs review' },
        icon: 'fiber_new',
        color: '#2196f3',
        category: 'open',
        isInitial: true,
        sortOrder: 1,
        slaHours: 4,
        responseHours: 1,
        notifyOnEnter: true
      },
      {
        name: 'assigned',
        displayName: { ru: '–ù–∞–∑–Ω–∞—á–µ–Ω', en: 'Assigned' },
        description: { ru: '–ò–Ω—Ü–∏–¥–µ–Ω—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é', en: 'Incident assigned to agent' },
        icon: 'assignment_ind',
        color: '#ff9800',
        category: 'active',
        sortOrder: 2,
        slaHours: 24,
        responseHours: 2,
        notifyOnEnter: true
      },
      {
        name: 'in_progress',
        displayName: { ru: '–í —Ä–∞–±–æ—Ç–µ', en: 'In Progress' },
        description: { ru: '–ò–Ω—Ü–∏–¥–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ', en: 'Incident is being worked on' },
        icon: 'work',
        color: '#9c27b0',
        category: 'active',
        sortOrder: 3,
        slaHours: 48,
        notifyOnEnter: false
      },
      {
        name: 'pending',
        displayName: { ru: '–û–∂–∏–¥–∞–Ω–∏–µ', en: 'Pending' },
        description: { ru: '–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ —Ç—Ä–µ—Ç—å–µ–π —Å—Ç–æ—Ä–æ–Ω—ã', en: 'Waiting for customer or third party response' },
        icon: 'schedule',
        color: '#607d8b',
        category: 'pending',
        sortOrder: 4,
        notifyOnEnter: true
      },
      {
        name: 'resolved',
        displayName: { ru: '–†–µ—à–µ–Ω', en: 'Resolved' },
        description: { ru: '–ò–Ω—Ü–∏–¥–µ–Ω—Ç —Ä–µ—à–µ–Ω, –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', en: 'Incident resolved, awaiting confirmation' },
        icon: 'check_circle',
        color: '#4caf50',
        category: 'resolved',
        sortOrder: 5,
        notifyOnEnter: true,
        notifyOnExit: false
      },
      {
        name: 'closed',
        displayName: { ru: '–ó–∞–∫—Ä—ã—Ç', en: 'Closed' },
        description: { ru: '–ò–Ω—Ü–∏–¥–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç', en: 'Incident closed' },
        icon: 'lock',
        color: '#757575',
        category: 'closed',
        isFinal: true,
        sortOrder: 6,
        notifyOnEnter: true
      }
    ];

    for (const statusInfo of statusData) {
      const status = await WorkflowStatus.create({
        ...statusInfo,
        workflowTypeId: incidentWorkflow.id,
        createdById: admin.id
      });
      statuses.push(status);
      console.log(`  ‚úÖ –°—Ç–∞—Ç—É—Å "${status.displayName.ru}" —Å–æ–∑–¥–∞–Ω`);
    }

    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å—Ç–∞—Ç—É—Å–∞–º–∏
    console.log('\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤...');
    const transitions = [];

    const transitionData = [
      {
        name: 'assign',
        displayName: { ru: '–ù–∞–∑–Ω–∞—á–∏—Ç—å', en: 'Assign' },
        description: { ru: '–ù–∞–∑–Ω–∞—á–∏—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é', en: 'Assign incident to agent' },
        fromStatusId: statuses[0].id, // new
        toStatusId: statuses[1].id,   // assigned
        icon: 'assignment',
        color: '#ff9800',
        requiresAssignment: true,
        allowedRoles: ['admin', 'agent'],
        sortOrder: 1
      },
      {
        name: 'start_work',
        displayName: { ru: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É', en: 'Start Work' },
        description: { ru: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–º', en: 'Start working on incident' },
        fromStatusId: statuses[1].id, // assigned
        toStatusId: statuses[2].id,   // in_progress
        icon: 'play_arrow',
        color: '#9c27b0',
        allowedRoles: ['admin', 'agent'],
        sortOrder: 1
      },
      {
        name: 'put_on_hold',
        displayName: { ru: '–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ', en: 'Put on Hold' },
        description: { ru: '–ü–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ', en: 'Put incident on hold' },
        fromStatusId: statuses[2].id, // in_progress
        toStatusId: statuses[3].id,   // pending
        icon: 'pause',
        color: '#607d8b',
        requiresComment: true,
        allowedRoles: ['admin', 'agent'],
        sortOrder: 2
      },
      {
        name: 'resume_work',
        displayName: { ru: '–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É', en: 'Resume Work' },
        description: { ru: '–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–º', en: 'Resume work on incident' },
        fromStatusId: statuses[3].id, // pending
        toStatusId: statuses[2].id,   // in_progress
        icon: 'play_arrow',
        color: '#9c27b0',
        allowedRoles: ['admin', 'agent'],
        sortOrder: 1
      },
      {
        name: 'resolve',
        displayName: { ru: '–†–µ—à–∏—Ç—å', en: 'Resolve' },
        description: { ru: '–û—Ç–º–µ—Ç–∏—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–π', en: 'Mark incident as resolved' },
        fromStatusId: statuses[2].id, // in_progress
        toStatusId: statuses[4].id,   // resolved
        icon: 'check_circle',
        color: '#4caf50',
        requiresComment: true,
        allowedRoles: ['admin', 'agent'],
        sortOrder: 1
      },
      {
        name: 'close',
        displayName: { ru: '–ó–∞–∫—Ä—ã—Ç—å', en: 'Close' },
        description: { ru: '–ó–∞–∫—Ä—ã—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç', en: 'Close incident' },
        fromStatusId: statuses[4].id, // resolved
        toStatusId: statuses[5].id,   // closed
        icon: 'lock',
        color: '#757575',
        allowedRoles: ['admin', 'agent', 'client'],
        sortOrder: 1
      },
      {
        name: 'reopen',
        displayName: { ru: '–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å', en: 'Reopen' },
        description: { ru: '–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç', en: 'Reopen closed incident' },
        fromStatusId: statuses[5].id, // closed
        toStatusId: statuses[1].id,   // assigned
        icon: 'refresh',
        color: '#ff5722',
        requiresComment: true,
        allowedRoles: ['admin', 'agent', 'client'],
        sortOrder: 2
      }
    ];

    for (const transitionInfo of transitionData) {
      const transition = await WorkflowTransition.create({
        ...transitionInfo,
        workflowTypeId: incidentWorkflow.id,
        createdById: admin.id
      });
      transitions.push(transition);
      console.log(`  ‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ "${transition.displayName.ru}" —Å–æ–∑–¥–∞–Ω`);
    }

    // –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    console.log('\n‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π...');
    
    // –£—Å–ª–æ–≤–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
    const assignTransition = transitions.find(t => t.name === 'assign');
    if (assignTransition) {
      await WorkflowCondition.create({
        transitionId: assignTransition.id,
        conditionType: 'field',
        fieldName: 'priority',
        operator: 'in',
        expectedValue: JSON.stringify(['high', 'critical']),
        conditionGroup: 1
      });
      console.log('  ‚úÖ –£—Å–ª–æ–≤–∏–µ –¥–ª—è –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ');
    }

    // –°–æ–∑–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    console.log('\nüé¨ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π...');
    
    // –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
    if (assignTransition) {
      await WorkflowAction.create({
        transitionId: assignTransition.id,
        actionType: 'notify',
        actionConfig: {
          recipients: ['assignee', 'creator'],
          notificationType: 'email',
          template: {
            subject: '–ò–Ω—Ü–∏–¥–µ–Ω—Ç {{ticket.title}} –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–∞–º',
            message: '–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –∏–Ω—Ü–∏–¥–µ–Ω—Ç: {{ticket.title}}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {{ticket.description}}\n\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {{ticket.priority}}'
          }
        },
        executionOrder: 1
      });
      console.log('  ‚úÖ –î–µ–π—Å—Ç–≤–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–æ');
    }

    // –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏
    const resolveTransition = transitions.find(t => t.name === 'resolve');
    if (resolveTransition) {
      await WorkflowAction.create({
        transitionId: resolveTransition.id,
        actionType: 'create_comment',
        actionConfig: {
          content: '–ò–Ω—Ü–∏–¥–µ–Ω—Ç –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–π. –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞.',
          isInternal: false
        },
        executionOrder: 1
      });
      console.log('  ‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–æ');

      // –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SLA –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏
      await WorkflowAction.create({
        transitionId: resolveTransition.id,
        actionType: 'update_sla',
        actionConfig: {
          action: 'stop_timer',
          reason: 'resolved'
        },
        executionOrder: 2
      });
      console.log('  ‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SLA –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–æ');
    }

    // –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ç–∏–ø workflow –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
    console.log('\nüìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–∞ workflow "–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"...');
    const serviceRequestWorkflow = await WorkflowType.create({
      name: 'service_request',
      displayName: {
        ru: '–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
        en: 'Service Requests'
      },
      description: {
        ru: 'Workflow –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
        en: 'Workflow for handling service requests'
      },
      icon: 'support_agent',
      color: '#00bcd4',
      isActive: true,
      createdById: admin.id
    });

    console.log('‚úÖ –¢–∏–ø workflow —Å–æ–∑–¥–∞–Ω:', serviceRequestWorkflow.id);

    // –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
    const serviceStatuses = [];
    const serviceStatusData = [
      {
        name: 'submitted',
        displayName: { ru: '–ü–æ–¥–∞–Ω', en: 'Submitted' },
        description: { ru: '–ó–∞–ø—Ä–æ—Å –ø–æ–¥–∞–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è', en: 'Request submitted and awaiting review' },
        icon: 'inbox',
        color: '#2196f3',
        category: 'open',
        isInitial: true,
        sortOrder: 1,
        slaHours: 8
      },
      {
        name: 'approved',
        displayName: { ru: '–û–¥–æ–±—Ä–µ–Ω', en: 'Approved' },
        description: { ru: '–ó–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é', en: 'Request approved and ready for fulfillment' },
        icon: 'thumb_up',
        color: '#4caf50',
        category: 'active',
        sortOrder: 2,
        slaHours: 72
      },
      {
        name: 'fulfilled',
        displayName: { ru: '–í—ã–ø–æ–ª–Ω–µ–Ω', en: 'Fulfilled' },
        description: { ru: '–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω', en: 'Request fulfilled' },
        icon: 'done_all',
        color: '#8bc34a',
        category: 'resolved',
        isFinal: true,
        sortOrder: 3
      },
      {
        name: 'rejected',
        displayName: { ru: '–û—Ç–∫–ª–æ–Ω–µ–Ω', en: 'Rejected' },
        description: { ru: '–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω', en: 'Request rejected' },
        icon: 'block',
        color: '#f44336',
        category: 'closed',
        isFinal: true,
        sortOrder: 4
      }
    ];

    for (const statusInfo of serviceStatusData) {
      const status = await WorkflowStatus.create({
        ...statusInfo,
        workflowTypeId: serviceRequestWorkflow.id,
        createdById: admin.id
      });
      serviceStatuses.push(status);
      console.log(`  ‚úÖ –°—Ç–∞—Ç—É—Å "${status.displayName.ru}" —Å–æ–∑–¥–∞–Ω`);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ workflow —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('\nüìä –°–æ–∑–¥–∞–Ω–æ:');
    console.log(`  - –¢–∏–ø–æ–≤ workflow: 2`);
    console.log(`  - –°—Ç–∞—Ç—É—Å–æ–≤: ${statuses.length + serviceStatuses.length}`);
    console.log(`  - –ü–µ—Ä–µ—Ö–æ–¥–æ–≤: ${transitions.length}`);
    console.log(`  - –£—Å–ª–æ–≤–∏–π: 1`);
    console.log(`  - –î–µ–π—Å—Ç–≤–∏–π: 3`);

    console.log('\n‚ú® –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:');
    console.log('  1. –û—Ç–∫—Ä—ã—Ç—å /workflow-admin –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è workflow');
    console.log('  2. –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç—ã —Å –Ω–æ–≤—ã–º–∏ —Ç–∏–ø–∞–º–∏ workflow');
    console.log('  3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å—Ç–∞—Ç—É—Å–∞–º–∏');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    console.error(error.stack);
  } finally {
    await sequelize.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
createTestWorkflow();