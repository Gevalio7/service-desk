const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const BASE_URL = 'http://localhost:3001'; // –ü–æ—Ä—Ç –±—ç–∫–µ–Ω–¥–∞
const TEST_TICKET_ID = 'test-ticket-id'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID —Ç–∏–∫–µ—Ç–∞
const TEST_TOKEN = 'your-auth-token'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω

async function testFileUpload() {
  try {
    console.log('üß™ –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –§–ê–ô–õ–û–í - –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    const testFileName = 'test-file.txt';
    const testFileContent = '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏';
    fs.writeFileSync(testFileName, testFileContent);
    
    console.log('üìÑ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª:', testFileName);
    
    // –°–æ–∑–¥–∞–µ–º FormData
    const formData = new FormData();
    formData.append('files', fs.createReadStream(testFileName));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞...');
    console.log('URL:', `${BASE_URL}/api/tickets/${TEST_TICKET_ID}/attachments`);
    
    const response = await axios.post(
      `${BASE_URL}/api/tickets/${TEST_TICKET_ID}/attachments`,
      formData,
      {
        headers: {
          ...formData.getHeaders(),
          'Authorization': `Bearer ${TEST_TOKEN}`
        }
      }
    );
    
    console.log('‚úÖ –£–°–ü–ï–•! –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:', response.data);
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    fs.unlinkSync(testFileName);
    console.log('üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω');
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:');
    
    if (error.response) {
      console.error('–°—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('–î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', error.response.data);
      console.error('–ó–∞–≥–æ–ª–æ–≤–∫–∏:', error.response.headers);
    } else if (error.request) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.request);
    } else {
      console.error('–û—à–∏–±–∫–∞:', error.message);
    }
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    try {
      fs.unlinkSync('test-file.txt');
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è
    }
  }
}

async function testTicketExists() {
  try {
    console.log('üîç –¢–ï–°–¢ –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –¢–ò–ö–ï–¢–ê - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–∫–µ—Ç–∞');
    
    const response = await axios.get(
      `${BASE_URL}/api/tickets/${TEST_TICKET_ID}`,
      {
        headers: {
          'Authorization': `Bearer ${TEST_TOKEN}`
        }
      }
    );
    
    console.log('‚úÖ –¢–∏–∫–µ—Ç –Ω–∞–π–¥–µ–Ω:', {
      id: response.data.ticket.id,
      title: response.data.ticket.title,
      status: response.data.ticket.status
    });
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–∏–∫–µ—Ç–∞:');
    
    if (error.response) {
      console.error('–°—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.response.data.message);
      
      if (error.response.status === 404) {
        console.error('üö® –¢–ò–ö–ï–¢ –ù–ï –ù–ê–ô–î–ï–ù! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TEST_TICKET_ID');
      }
    }
    
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ó–ê–ì–†–£–ó–ö–ò –§–ê–ô–õ–û–í');
  console.log('================================');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  if (TEST_TICKET_ID === 'test-ticket-id') {
    console.error('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π TEST_TICKET_ID');
    return;
  }
  
  if (TEST_TOKEN === 'your-auth-token') {
    console.error('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π TEST_TOKEN');
    return;
  }
  
  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
  const ticketExists = await testTicketExists();
  
  if (!ticketExists) {
    console.error('‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω: —Ç–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  // –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
  await testFileUpload();
  
  console.log('================================');
  console.log('üèÅ –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runTests();
}

module.exports = { testFileUpload, testTicketExists };